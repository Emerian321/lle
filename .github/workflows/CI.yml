name: CI

on:
  push:
    branches:
      - main
      - master
      - dev
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'}}
    name: Run tests
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
        target:
          - x86_64
          - aarch64
        python-version: 
          - '3.10'
          - '3.11'
          - '3.12'
        exclude:
          - os: windows-latest
            target: 'aarch64'

    runs-on: ${{ matrix.os }}
    steps:
      # Checkout
      - uses: actions/checkout@v4
      # Rust 
      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Rust tests
        run: |
          cargo build
          cargo test

      # Python
      - name: Install Python
        uses: actions/setup-python@v5
        with: 
          python-version: ${{ matrix.python-version }}
      # UV, venv and dependencies
      - name: Install UV and create the virtualenv
        run: |
          pip install uv
          uv venv .venv

      - name: Activate virtual environment (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          "VIRTUAL_ENV=.venv" | Out-File -FilePath $env:GITHUB_ENV -Append
          "$PWD/.venv/Scripts" | Out-File -FilePath $env:GITHUB_PATH -Append
      - name: Activate virtual environment (Unix)
        if: ${{ runner.os != 'Windows' }}
        run: |
          echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run:  uv pip install -r pyproject.toml
      # Test
      - name: Pytest
        run: |
          maturin dev
          pytest

          
  build:
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
        target:
          - x86_64
          - aarch64
        python-version: 
          - '3.10'
          - '3.11'
          - '3.12'
        exclude:
          - os: windows-latest
            target: 'aarch64'

    runs-on: ${{ matrix.os }}
    needs: [test]
    steps:
      - uses: actions/checkout@v3
      - name: Python setup
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install UV and create the virtualenv
        run: |
          pip install uv
          uv venv .venv

      - name: Activate virtual environment (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          "VIRTUAL_ENV=.venv" | Out-File -FilePath $env:GITHUB_ENV -Append
          "$PWD/.venv/Scripts" | Out-File -FilePath $env:GITHUB_PATH -Append
      - name: Activate virtual environment (Unix)
        if: ${{ runner.os != 'Windows' }}
        run: |
          echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
          
      - name: Install dependencies
        run: |
          uv pip install -r pyproject.toml
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  sdist:
    name: Build dist
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3  
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [sdist]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --skip-existing *
